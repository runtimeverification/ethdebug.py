# generated by datamodel-codegen:
#   filename:  contract.schema.yaml
#   timestamp: 2025-04-11T19:10:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel, conint, constr


class Type(Enum):
    compilation = 'compilation'
    source = 'source'


class Id(RootModel[Union[float, str]]):
    root: Union[float, str] = Field(
        ...,
        description='An opaque external ID (likely generated by compiler)',
        examples=[5, 'five'],
        title='ethdebug/format/materials/id',
    )


class Unsigned(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ...,
        description='A non-negative integer encoded as a JSON number.\n',
        examples=[0, 100],
        title='ethdebug/format/data/unsigned',
    )


class Hex(RootModel[constr(pattern=r'^0x[0-9a-fA-F]{1,}$')]):
    root: constr(pattern=r'^0x[0-9a-fA-F]{1,}$') = Field(
        ...,
        description='A `0x`-prefixed hexadecimal string. This value **must** contain at least one\nhexadecimal character (`0x` by itself is not allowed).\n',
        examples=['0x0000', '0x1'],
        title='ethdebug/format/data/hex',
    )


class Reference(BaseModel):
    id: Id
    type: Optional[Type] = None


class Value(RootModel[Union[Unsigned, Hex]]):
    root: Union[Unsigned, Hex] = Field(
        ...,
        description='A non-negative integer value, expressed either as a native JSON number or as\na `0x`-prefixed hexadecimal string.\n',
        examples=['0x0000', 2],
        title='ethdebug/format/data/value',
    )


class Range(BaseModel):
    offset: Value = Field(..., description='Byte offset at beginning of range.\n')
    length: Value = Field(..., description='Number of bytes contained in range')


class SourceRange(BaseModel):
    compilation: Optional[Reference] = Field(None, title='Compilation reference by ID')
    source: Reference = Field(..., title='Source reference by ID')
    range: Optional[Range] = Field(
        None,
        description='Ranges that span the entire source contents **may** omit this field\nas a shorthand. This field is otherwise **required**.\n',
        title='Bytes range within source contents',
    )


class Definition1(BaseModel):
    name: str
    location: Optional[SourceRange] = None


class Definition2(BaseModel):
    name: Optional[str] = None
    location: SourceRange


class Definition(RootModel[Union[Definition1, Definition2]]):
    root: Union[Definition1, Definition2] = Field(
        ...,
        description='Object containing name and location information for a type.\n\nThis schema does not require any particular field, but it **must** contain\nat least one property.\n',
        examples=[
            {
                'name': 'Ballot',
                'location': {
                    'source': {'id': 5},
                    'range': {'offset': 10, 'length': 56},
                },
            }
        ],
        title='ethdebug/format/type/definition',
    )


class EthdebugFormatTypeElementaryContract1(BaseModel):
    class_: Literal['elementary'] = Field('elementary', alias='class')
    kind: Literal['contract']
    payable: Optional[bool] = Field(
        None,
        description='If this field is omitted, this type represents an address whose payability is not known.',
    )
    definition: Optional[Definition] = None
    library: Literal[False] = False
    interface: Literal[False] = False


class EthdebugFormatTypeElementaryContract2(BaseModel):
    class_: Literal['elementary'] = Field('elementary', alias='class')
    kind: Literal['contract']
    payable: Optional[bool] = Field(
        None,
        description='If this field is omitted, this type represents an address whose payability is not known.',
    )
    definition: Optional[Definition] = None
    library: Literal[True] = Field(
        ..., description='Indicates that this is a type representing a library'
    )


class EthdebugFormatTypeElementaryContract3(BaseModel):
    class_: Literal['elementary'] = Field('elementary', alias='class')
    kind: Literal['contract']
    payable: Optional[bool] = Field(
        None,
        description='If this field is omitted, this type represents an address whose payability is not known.',
    )
    definition: Optional[Definition] = None
    interface: Literal[True] = Field(
        ..., description='Indicates that this is a type representing an interface'
    )


class EthdebugFormatTypeElementaryContract(
    RootModel[
        Union[
            EthdebugFormatTypeElementaryContract1,
            EthdebugFormatTypeElementaryContract2,
            EthdebugFormatTypeElementaryContract3,
        ]
    ]
):
    root: Union[
        EthdebugFormatTypeElementaryContract1,
        EthdebugFormatTypeElementaryContract2,
        EthdebugFormatTypeElementaryContract3,
    ] = Field(
        ...,
        description='Schema describing the representation of a contract type',
        examples=[
            {'kind': 'contract'},
            {'kind': 'contract', 'library': False, 'interface': False, 'payable': True},
        ],
        title='ethdebug/format/type/elementary/contract',
    )
