# generated by datamodel-codegen:
#   filename:  type/elementary/contract.schema.yaml

from __future__ import annotations

from typing import Annotated, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel

from ..definition_schema import TypeDefinition


class Type_Elementary_Contract(BaseModel):
    class_: Annotated[Literal['elementary'], Field(alias='class')] = 'elementary'
    kind: Literal['contract']
    payable: Annotated[
        Optional[bool],
        Field(
            description='If this field is omitted, this type represents an address whose payability is not known.'
        ),
    ] = None
    definition: Optional[TypeDefinition] = None
    library: Literal[False] = False
    interface: Literal[False] = False


class TypeElementaryContract2(BaseModel):
    class_: Annotated[Literal['elementary'], Field(alias='class')] = 'elementary'
    kind: Literal['contract']
    payable: Annotated[
        Optional[bool],
        Field(
            description='If this field is omitted, this type represents an address whose payability is not known.'
        ),
    ] = None
    definition: Optional[TypeDefinition] = None
    library: Annotated[
        Literal[True],
        Field(description='Indicates that this is a type representing a library'),
    ]


class TypeElementaryContract3(BaseModel):
    class_: Annotated[Literal['elementary'], Field(alias='class')] = 'elementary'
    kind: Literal['contract']
    payable: Annotated[
        Optional[bool],
        Field(
            description='If this field is omitted, this type represents an address whose payability is not known.'
        ),
    ] = None
    definition: Optional[TypeDefinition] = None
    interface: Annotated[
        Literal[True],
        Field(description='Indicates that this is a type representing an interface'),
    ]


class TypeElementaryContract(
    RootModel[
        Union[
            Type_Elementary_Contract, TypeElementaryContract2, TypeElementaryContract3
        ]
    ]
):
    root: Annotated[
        Union[
            Type_Elementary_Contract, TypeElementaryContract2, TypeElementaryContract3
        ],
        Field(
            description='Schema describing the representation of a contract type',
            examples=[
                {'kind': 'contract'},
                {
                    'kind': 'contract',
                    'library': False,
                    'interface': False,
                    'payable': True,
                },
            ],
            title='ethdebug/format/type/elementary/contract',
        ),
    ]
