# generated by datamodel-codegen:
#   filename:  type/elementary/contract.schema.yaml
#   timestamp: 2025-05-02T06:59:03+00:00

from __future__ import annotations

from typing import Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel

from ..complex import alias_schema


class EthdebugFormatTypeElementaryContract1(BaseModel):
    class_: Literal['elementary'] = Field('elementary', alias='class')
    kind: Literal['contract']
    payable: Optional[bool] = Field(
        None,
        description='If this field is omitted, this type represents an address whose payability is not known.',
    )
    definition: Optional[alias_schema.Definition] = None
    library: Literal[False] = False
    interface: Literal[False] = False


class EthdebugFormatTypeElementaryContract2(BaseModel):
    class_: Literal['elementary'] = Field('elementary', alias='class')
    kind: Literal['contract']
    payable: Optional[bool] = Field(
        None,
        description='If this field is omitted, this type represents an address whose payability is not known.',
    )
    definition: Optional[alias_schema.Definition] = None
    library: Literal[True] = Field(
        ..., description='Indicates that this is a type representing a library'
    )


class EthdebugFormatTypeElementaryContract3(BaseModel):
    class_: Literal['elementary'] = Field('elementary', alias='class')
    kind: Literal['contract']
    payable: Optional[bool] = Field(
        None,
        description='If this field is omitted, this type represents an address whose payability is not known.',
    )
    definition: Optional[alias_schema.Definition] = None
    interface: Literal[True] = Field(
        ..., description='Indicates that this is a type representing an interface'
    )


class EthdebugFormatTypeElementaryContract(
    RootModel[
        Union[
            EthdebugFormatTypeElementaryContract1,
            EthdebugFormatTypeElementaryContract2,
            EthdebugFormatTypeElementaryContract3,
        ]
    ]
):
    root: Union[
        EthdebugFormatTypeElementaryContract1,
        EthdebugFormatTypeElementaryContract2,
        EthdebugFormatTypeElementaryContract3,
    ] = Field(
        ...,
        description='Schema describing the representation of a contract type',
        examples=[
            {'kind': 'contract'},
            {'kind': 'contract', 'library': False, 'interface': False, 'payable': True},
        ],
        title='ethdebug/format/type/elementary/contract',
    )
