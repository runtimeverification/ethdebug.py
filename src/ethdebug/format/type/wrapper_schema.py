# generated by datamodel-codegen:
#   filename:  type/wrapper.schema.yaml
#   timestamp: 2025-05-02T06:59:03+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class EthdebugFormatTypeWrapper(BaseModel):
    type: Any


class Array(RootModel[List[EthdebugFormatTypeWrapper]]):
    root: List[EthdebugFormatTypeWrapper] = Field(
        ...,
        description='A list of wrapped types, where the wrapper may add fields',
        title='{ "type": ... }[]',
    )


class Object(RootModel[Optional[Dict[str, EthdebugFormatTypeWrapper]]]):
    root: Optional[Dict[str, EthdebugFormatTypeWrapper]] = None
