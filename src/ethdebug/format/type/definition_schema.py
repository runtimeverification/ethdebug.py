# generated by datamodel-codegen:
#   filename:  type/definition.schema.yaml

from __future__ import annotations

from typing import Optional, Union

from pydantic import BaseModel, Field, RootModel

from ..materials import source_range_schema


class EthdebugFormatTypeDefinition1(BaseModel):
    name: str
    location: Optional[source_range_schema.EthdebugFormatMaterialsSourceRange] = None


class EthdebugFormatTypeDefinition2(BaseModel):
    name: Optional[str] = None
    location: source_range_schema.EthdebugFormatMaterialsSourceRange


class EthdebugFormatTypeDefinition(
    RootModel[Union[EthdebugFormatTypeDefinition1, EthdebugFormatTypeDefinition2]]
):
    root: Union[EthdebugFormatTypeDefinition1, EthdebugFormatTypeDefinition2] = Field(
        ...,
        description='Object containing name and location information for a type.\n\nThis schema does not require any particular field, but it **must** contain\nat least one property.\n',
        examples=[
            {
                'name': 'Ballot',
                'location': {
                    'source': {'id': 5},
                    'range': {'offset': 10, 'length': 56},
                },
            }
        ],
        title='ethdebug/format/type/definition',
    )
