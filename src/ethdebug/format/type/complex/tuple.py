# generated by datamodel-codegen:
#   filename:  tuple.schema.yaml
#   timestamp: 2025-04-11T12:46:47+00:00

from __future__ import annotations

from typing import Any, Dict, List, Literal, Optional

from pydantic import BaseModel, Field, RootModel


class Wrapper(BaseModel):
    type: Any


class Array(RootModel[List[Wrapper]]):
    root: List[Wrapper] = Field(
        ...,
        description='A list of wrapped types, where the wrapper may add fields',
        title='{ "type": ... }[]',
    )


class Object(RootModel[Optional[Dict[str, Wrapper]]]):
    root: Optional[Dict[str, Wrapper]] = None


class Element(Wrapper):
    name: Optional[str] = Field(
        None,
        description='For tuple types where positional element types are identified by name, this field **should** include this information.\nThis schema makes no restriction on whether all-or-no elements have names, and so this field may be sparse across elements of the same tuple.',
    )


class EthdebugFormatTypeComplexTuple(BaseModel):
    class_: Literal['complex'] = Field('complex', alias='class')
    kind: Literal['tuple']
    contains: List[Element]
