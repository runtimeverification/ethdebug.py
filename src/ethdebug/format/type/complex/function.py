# generated by datamodel-codegen:
#   filename:  function.schema.yaml
#   timestamp: 2025-04-11T12:46:47+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel, conint, constr


class Wrapper(BaseModel):
    type: Any


class Array(RootModel[List[Wrapper]]):
    root: List[Wrapper] = Field(
        ...,
        description='A list of wrapped types, where the wrapper may add fields',
        title='{ "type": ... }[]',
    )


class Object(RootModel[Optional[Dict[str, Wrapper]]]):
    root: Optional[Dict[str, Wrapper]] = None


class Type(Enum):
    compilation = 'compilation'
    source = 'source'


class Id(RootModel[Union[float, str]]):
    root: Union[float, str] = Field(
        ...,
        description='An opaque external ID (likely generated by compiler)',
        examples=[5, 'five'],
        title='ethdebug/format/materials/id',
    )


class Unsigned(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ...,
        description='A non-negative integer encoded as a JSON number.\n',
        examples=[0, 100],
        title='ethdebug/format/data/unsigned',
    )


class Hex(RootModel[constr(pattern=r'^0x[0-9a-fA-F]{1,}$')]):
    root: constr(pattern=r'^0x[0-9a-fA-F]{1,}$') = Field(
        ...,
        description='A `0x`-prefixed hexadecimal string. This value **must** contain at least one\nhexadecimal character (`0x` by itself is not allowed).\n',
        examples=['0x0000', '0x1'],
        title='ethdebug/format/data/hex',
    )


class Element(Wrapper):
    name: Optional[str] = Field(
        None,
        description='For tuple types where positional element types are identified by name, this field **should** include this information.\nThis schema makes no restriction on whether all-or-no elements have names, and so this field may be sparse across elements of the same tuple.',
    )


class Reference(BaseModel):
    id: Id
    type: Optional[Type] = None


class Value(RootModel[Union[Unsigned, Hex]]):
    root: Union[Unsigned, Hex] = Field(
        ...,
        description='A non-negative integer value, expressed either as a native JSON number or as\na `0x`-prefixed hexadecimal string.\n',
        examples=['0x0000', 2],
        title='ethdebug/format/data/value',
    )


class Tuple(BaseModel):
    class_: Literal['complex'] = Field('complex', alias='class')
    kind: Literal['tuple']
    contains: List[Element]


class Range(BaseModel):
    offset: Value = Field(..., description='Byte offset at beginning of range.\n')
    length: Value = Field(..., description='Number of bytes contained in range')


class SourceRange(BaseModel):
    compilation: Optional[Reference] = Field(None, title='Compilation reference by ID')
    source: Reference = Field(..., title='Source reference by ID')
    range: Optional[Range] = Field(
        None,
        description='Ranges that span the entire source contents **may** omit this field\nas a shorthand. This field is otherwise **required**.\n',
        title='Bytes range within source contents',
    )


class Parameters(Wrapper):
    type: Optional[Tuple] = None


class Contains1(BaseModel):
    parameters: Parameters
    returns: Optional[Union[Wrapper, Parameters]] = Field(
        None,
        description='To accommodate languages differing in whether functions return single\nvalues or lists of values, this field may be either a generic type\nwrapper or explicitly defined as a type wrapper around a tuple type.\n\nDebuggers that implement this schema **should** be aware that\nlanguages whose functions return sole values might return tuple\ntypes. Resolving this ambiguity remains outside the scope of the\nschema (but compilers **must** be consistent when representing\nfunction types in this schema).\n',
        title='Return type (or tuple of types)',
    )


class Definition1(BaseModel):
    name: str
    location: Optional[SourceRange] = None


class Definition2(BaseModel):
    name: Optional[str] = None
    location: SourceRange


class Definition(RootModel[Union[Definition1, Definition2]]):
    root: Union[Definition1, Definition2] = Field(
        ...,
        description='Object containing name and location information for a type.\n\nThis schema does not require any particular field, but it **must** contain\nat least one property.\n',
        examples=[
            {
                'name': 'Ballot',
                'location': {
                    'source': {'id': 5},
                    'range': {'offset': 10, 'length': 56},
                },
            }
        ],
        title='ethdebug/format/type/definition',
    )


class EthdebugFormatTypeComplexFunction2(BaseModel):
    class_: Literal['complex'] = Field('complex', alias='class')
    kind: Literal['function'] = 'function'
    contains: Optional[Contains1] = Field(
        None,
        description="Types this function type composes. Function types inherently compose\ntwo groupings of types (an ordered list of parameter types and typically\neither a return value or return parameters). Function types' `contains`\nfield is organized as a mapping of `parameters` types (a type wrapper for\na tuple type) and an optional `returns` type (either a generic type\nwrapper or a type wrapper for a tuple type).\n\nThis definition applies for both cases (internal and external function\ntypes). Each of those specific types may expand this `contains` field\nschema with other semantic details (such as an external function type\nindicating the contract type from which it is exposed).\n",
        title='Parameter and return types',
    )
    definition: Optional[Definition] = None
    internal: Literal[True]
    external: Literal[False] = False


class Contract1(BaseModel):
    class_: Literal['elementary'] = Field('elementary', alias='class')
    kind: Literal['contract']
    payable: Optional[bool] = Field(
        None,
        description='If this field is omitted, this type represents an address whose payability is not known.',
    )
    definition: Optional[Definition] = None
    library: Literal[False] = False
    interface: Literal[False] = False


class Contract2(BaseModel):
    class_: Literal['elementary'] = Field('elementary', alias='class')
    kind: Literal['contract']
    payable: Optional[bool] = Field(
        None,
        description='If this field is omitted, this type represents an address whose payability is not known.',
    )
    definition: Optional[Definition] = None
    library: Literal[True] = Field(
        ..., description='Indicates that this is a type representing a library'
    )


class Contract3(BaseModel):
    class_: Literal['elementary'] = Field('elementary', alias='class')
    kind: Literal['contract']
    payable: Optional[bool] = Field(
        None,
        description='If this field is omitted, this type represents an address whose payability is not known.',
    )
    definition: Optional[Definition] = None
    interface: Literal[True] = Field(
        ..., description='Indicates that this is a type representing an interface'
    )


class Contract(RootModel[Union[Contract1, Contract2, Contract3]]):
    root: Union[Contract1, Contract2, Contract3] = Field(
        ...,
        description='Schema describing the representation of a contract type',
        examples=[
            {'kind': 'contract'},
            {'kind': 'contract', 'library': False, 'interface': False, 'payable': True},
        ],
        title='ethdebug/format/type/elementary/contract',
    )


class ContractModel(Wrapper):
    type: Optional[Contract] = None


class Contains(BaseModel):
    parameters: Parameters
    returns: Optional[Union[Wrapper, Parameters]] = Field(
        None,
        description='To accommodate languages differing in whether functions return single\nvalues or lists of values, this field may be either a generic type\nwrapper or explicitly defined as a type wrapper around a tuple type.\n\nDebuggers that implement this schema **should** be aware that\nlanguages whose functions return sole values might return tuple\ntypes. Resolving this ambiguity remains outside the scope of the\nschema (but compilers **must** be consistent when representing\nfunction types in this schema).\n',
        title='Return type (or tuple of types)',
    )
    contract: Optional[ContractModel] = Field(
        None,
        description='A wrapper around the contract type that composes this external function type.',
        title='Contract type providing external function',
    )


class EthdebugFormatTypeComplexFunction1(BaseModel):
    class_: Literal['complex'] = Field('complex', alias='class')
    kind: Literal['function'] = 'function'
    contains: Optional[Contains] = Field(
        None,
        description="Types this function type composes. Function types inherently compose\ntwo groupings of types (an ordered list of parameter types and typically\neither a return value or return parameters). Function types' `contains`\nfield is organized as a mapping of `parameters` types (a type wrapper for\na tuple type) and an optional `returns` type (either a generic type\nwrapper or a type wrapper for a tuple type).\n\nThis definition applies for both cases (internal and external function\ntypes). Each of those specific types may expand this `contains` field\nschema with other semantic details (such as an external function type\nindicating the contract type from which it is exposed).\n",
        title='Additional contents',
    )
    definition: Optional[Definition] = None
    internal: Literal[False] = False
    external: Literal[True]


class EthdebugFormatTypeComplexFunction(
    RootModel[
        Union[EthdebugFormatTypeComplexFunction1, EthdebugFormatTypeComplexFunction2]
    ]
):
    root: Union[
        EthdebugFormatTypeComplexFunction1, EthdebugFormatTypeComplexFunction2
    ] = Field(
        ...,
        description='Schema for representing a function type.\n\nType representations must indicate whether they represent a function that is\ncalled internally (within the semantics of the language) or a function that\nis called externally (via EVM contract call semantics and the Solidity ABI).\nInternal function types require the `"internal": true` field; external\nfunction types require `"external": true`.\n\nNote that external function types may include a representation of the\ncontract type that defines or provides this function as an external\ninterface.\n',
        examples=[
            {
                'kind': 'function',
                'internal': True,
                'definition': {'name': 'increment'},
                'contains': {
                    'parameters': {
                        'type': {
                            'kind': 'tuple',
                            'contains': [
                                {'name': 'value', 'type': {'kind': 'uint', 'bits': 256}}
                            ],
                        }
                    },
                    'returns': {'type': {'kind': 'uint', 'bits': 256}},
                },
            },
            {
                'kind': 'function',
                'external': True,
                'definition': {'name': 'withdraw'},
                'contains': {
                    'contract': {
                        'type': {
                            'kind': 'contract',
                            'payable': True,
                            'interface': True,
                            'definition': {'name': 'Bank'},
                        }
                    },
                    'parameters': {
                        'type': {
                            'kind': 'tuple',
                            'contains': [
                                {
                                    'name': 'beneficiary',
                                    'type': {'kind': 'address', 'payable': True},
                                },
                                {
                                    'name': 'amount',
                                    'type': {
                                        'kind': 'ufixed',
                                        'bits': 128,
                                        'places': 18,
                                    },
                                },
                            ],
                        }
                    },
                    'returns': {'type': {'kind': 'tuple', 'contains': []}},
                },
            },
        ],
        title='ethdebug/format/type/complex/function',
    )
