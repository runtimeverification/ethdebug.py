# generated by datamodel-codegen:
#   filename:  mapping.schema.yaml
#   timestamp: 2025-04-11T12:46:47+00:00

from __future__ import annotations

from typing import Any, Dict, List, Literal, Optional

from pydantic import BaseModel, Field, RootModel


class Wrapper(BaseModel):
    type: Any


class Array(RootModel[List[Wrapper]]):
    root: List[Wrapper] = Field(
        ...,
        description='A list of wrapped types, where the wrapper may add fields',
        title='{ "type": ... }[]',
    )


class Object(RootModel[Optional[Dict[str, Wrapper]]]):
    root: Optional[Dict[str, Wrapper]] = None


class Contains(BaseModel):
    key: Wrapper
    value: Wrapper


class EthdebugFormatTypeComplexMapping(BaseModel):
    class_: Literal['complex'] = Field('complex', alias='class')
    kind: Literal['mapping']
    contains: Contains = Field(..., title='Mapping key/value types')
