# generated by datamodel-codegen:
#   filename:  program/context.schema.yaml
#   timestamp: 2025-05-02T06:59:03+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field, RootModel, constr

from ..pointer.collection import conditional_schema
from ..type import base_schema
from ..type.complex import alias_schema


class Type(BaseModel):
    pass


class Remark(BaseModel):
    remark: str


class Code(BaseModel):
    code: alias_schema.SourceRange


class Variable(BaseModel):
    identifier: Optional[constr(min_length=1)] = None
    declaration: Optional[alias_schema.SourceRange] = Field(
        None,
        description='Source range corresponding to where the variable was declared.\n',
    )
    type: Optional[Union[Type, base_schema.Reference]] = Field(
        None,
        description='The variable\'s static type, if it exists. This **must** be specified\neither as a full **ethdebug/format/type** representation, or an\n`{ "id": "..." }` type reference object.\n',
    )
    pointer: Optional[conditional_schema.Pointer] = Field(
        None, description='Allocation information for the variable, if it exists.\n'
    )


class Variables(BaseModel):
    variables: List[Variable] = Field(..., min_length=1)


class EthdebugFormatProgramContext(RootModel[Union[Code, Variables, Remark]]):
    root: Union[Code, Variables, Remark] = Field(
        ...,
        description='A schema for representing the information known at compile-time about the\nhigh-level language concerns at a particular point in code execution.\n',
        examples=[
            {
                'variables': [
                    {
                        'identifier': 'x',
                        'declaration': {
                            'source': {'id': 5},
                            'range': {'offset': 10, 'length': 56},
                        },
                        'type': {'kind': 'string'},
                        'pointer': {'location': 'storage', 'slot': 0},
                    }
                ],
                'code': {'source': {'id': 5}, 'range': {'offset': 68, 'length': 16}},
            }
        ],
        title='ethdebug/format/program/context',
    )
