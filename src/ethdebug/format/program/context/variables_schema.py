# generated by datamodel-codegen:
#   filename:  program/context/variables.schema.yaml

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field, constr

from ... import pointer_schema, type_schema
from ...materials import source_range_schema
from ...type import reference_schema


class Variable(BaseModel):
    identifier: Optional[constr(min_length=1)] = None
    declaration: Optional[source_range_schema.EthdebugFormatMaterialsSourceRange] = (
        Field(
            None,
            description='Source range corresponding to where the variable was declared.\n',
        )
    )
    type: Optional[
        Union[
            type_schema.EthdebugFormatType, reference_schema.EthdebugFormatTypeReference
        ]
    ] = Field(
        None,
        description='The variable\'s static type, if it exists. This **must** be specified\neither as a full **ethdebug/format/type** representation, or an\n`{ "id": "..." }` type reference object.\n',
    )
    pointer: Optional[pointer_schema.EthdebugFormatPointer] = Field(
        None, description='Allocation information for the variable, if it exists.\n'
    )


class EthdebugFormatProgramContextVariables(BaseModel):
    variables: List[Variable] = Field(..., min_length=1)
