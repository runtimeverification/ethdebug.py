# generated by datamodel-codegen:
#   filename:  program/context/variables.schema.yaml
#   timestamp: 2025-05-02T06:59:03+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field, constr

from ...pointer.collection import conditional_schema
from ...type import base_schema
from ...type.complex import alias_schema
from .. import context_schema


class Variable(BaseModel):
    identifier: Optional[constr(min_length=1)] = None
    declaration: Optional[alias_schema.SourceRange] = Field(
        None,
        description='Source range corresponding to where the variable was declared.\n',
    )
    type: Optional[Union[context_schema.Type, base_schema.Reference]] = Field(
        None,
        description='The variable\'s static type, if it exists. This **must** be specified\neither as a full **ethdebug/format/type** representation, or an\n`{ "id": "..." }` type reference object.\n',
    )
    pointer: Optional[conditional_schema.Pointer] = Field(
        None, description='Allocation information for the variable, if it exists.\n'
    )


class EthdebugFormatProgramContextVariables(BaseModel):
    variables: List[Variable] = Field(..., min_length=1)
