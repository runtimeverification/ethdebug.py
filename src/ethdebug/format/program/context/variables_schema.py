# generated by datamodel-codegen:
#   filename:  program/context/variables.schema.yaml

from __future__ import annotations

from typing import Annotated, List, Optional, Union

from pydantic import BaseModel, Field

from ...materials.source_range_schema import MaterialsSourceRange
from ...pointer_schema import Pointer
from ...type.reference_schema import TypeReference
from ...type_schema import Type


class ProgramContextVariables(BaseModel):
    variables: Annotated[List[Variable], Field(min_length=1)]


class Variable(BaseModel):
    identifier: Annotated[Optional[str], Field(min_length=1)] = None
    declaration: Annotated[
        Optional[MaterialsSourceRange],
        Field(
            description='Source range corresponding to where the variable was declared.\n'
        ),
    ] = None
    type: Annotated[
        Optional[Union[Type, TypeReference]],
        Field(
            description='The variable\'s static type, if it exists. This **must** be specified\neither as a full **ethdebug/format/type** representation, or an\n`{ "id": "..." }` type reference object.\n'
        ),
    ] = None
    pointer: Annotated[
        Optional[Pointer],
        Field(description='Allocation information for the variable, if it exists.\n'),
    ] = None


ProgramContextVariables.model_rebuild()
