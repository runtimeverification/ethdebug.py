# generated by datamodel-codegen:
#   filename:  program/instruction.schema.yaml

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field

from ..data import value_schema
from . import context_schema


class Operation(BaseModel):
    mnemonic: str = Field(..., description='The mnemonic operation code (PUSH1, e.g.)')
    arguments: Optional[List[value_schema.EthdebugFormatDataValue]] = Field(
        None,
        description='The immediate arguments to the operation, if relevant.',
        min_length=1,
    )


class EthdebugFormatProgramInstruction(BaseModel):
    offset: value_schema.EthdebugFormatDataValue = Field(
        ...,
        description="The byte offset where the instruction begins within the bytecode.\n\nFor legacy contract bytecode (non-EOF), this value is equivalent to the\ninstruction's program counter. For EOF bytecode, this value **must** be\nthe offset from the start of the container, not the start of a particular\ncode section within that container.\n",
        title='Instruction byte offset',
    )
    operation: Optional[Operation] = Field(None, title='Machine operation information')
    context: Optional[context_schema.EthdebugFormatProgramContext] = Field(
        {},
        description='The context known to exist following the execution of this instruction.\n\nThis field is **optional**. Omitting it is equivalent to specifying the\nempty context value (`{}`).\n',
    )
