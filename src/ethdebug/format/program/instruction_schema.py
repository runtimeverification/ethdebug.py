# generated by datamodel-codegen:
#   filename:  program/instruction.schema.yaml
#   timestamp: 2025-05-02T06:59:03+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field

from .. import info_schema
from ..type.complex import alias_schema


class Operation(BaseModel):
    mnemonic: str = Field(..., description='The mnemonic operation code (PUSH1, e.g.)')
    arguments: Optional[List[alias_schema.Value]] = Field(
        None,
        description='The immediate arguments to the operation, if relevant.',
        min_length=1,
    )


class EthdebugFormatProgramInstruction(BaseModel):
    offset: alias_schema.Value = Field(
        ...,
        description="The byte offset where the instruction begins within the bytecode.\n\nFor legacy contract bytecode (non-EOF), this value is equivalent to the\ninstruction's program counter. For EOF bytecode, this value **must** be\nthe offset from the start of the container, not the start of a particular\ncode section within that container.\n",
        title='Instruction byte offset',
    )
    operation: Optional[Operation] = Field(None, title='Machine operation information')
    context: info_schema.Context = Field(
        ...,
        description='The context known to exist following the execution of this instruction.\n',
    )
