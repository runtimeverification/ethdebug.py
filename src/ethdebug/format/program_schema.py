# generated by datamodel-codegen:
#   filename:  program.schema.yaml
#   timestamp: 2025-05-02T06:59:03+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field

from . import info_schema
from .type.complex import alias_schema


class Environment(Enum):
    call = 'call'
    create = 'create'


class Contract(BaseModel):
    name: Optional[str] = None
    definition: alias_schema.SourceRange


class EthdebugFormatProgram(BaseModel):
    compilation: Optional[alias_schema.Reference] = Field(
        None,
        description='A reference to the compilation as an `{ "id": ... }` object.\n',
        title='Compilation reference by ID',
    )
    contract: Contract
    environment: Environment = Field(
        ...,
        description='Whether this bytecode is for contract creation or runtime calls.\n',
        title='Bytecode execution environment',
    )
    context: Optional[info_schema.Context] = Field(
        None,
        description='The context known to exist prior to the execution of the first\ninstruction in the bytecode.\n',
    )
    instructions: List[info_schema.Instruction] = Field(
        ..., description='The full array of instructions for the bytecode.\n'
    )
