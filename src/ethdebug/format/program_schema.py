# generated by datamodel-codegen:
#   filename:  program.schema.yaml

from __future__ import annotations

from enum import Enum
from typing import Annotated, List, Optional

from pydantic import BaseModel, Field

from .materials.reference_schema import MaterialsReference
from .materials.source_range_schema import MaterialsSourceRange
from .program.context_schema import ProgramContext
from .program.instruction_schema import ProgramInstruction


class Environment(Enum):
    call = 'call'
    create = 'create'


class Contract(BaseModel):
    name: Optional[str] = None
    definition: MaterialsSourceRange


class Program(BaseModel):
    compilation: Annotated[
        Optional[MaterialsReference],
        Field(
            description='A reference to the compilation as an `{ "id": ... }` object.\n',
            title='Compilation reference by ID',
        ),
    ] = None
    contract: Contract
    environment: Annotated[
        Environment,
        Field(
            description='Whether this bytecode is for contract creation or runtime calls.\n',
            title='Bytecode execution environment',
        ),
    ]
    context: Annotated[
        Optional[ProgramContext],
        Field(
            description='The context known to exist prior to the execution of the first\ninstruction in the bytecode.\n\nThis field is **optional**. Omitting it is equivalent to specifying the\nempty context value (`{}`).\n'
        ),
    ] = {}
    instructions: Annotated[
        List[ProgramInstruction],
        Field(description='The full array of instructions for the bytecode.\n'),
    ]
