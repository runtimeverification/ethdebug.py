# generated by datamodel-codegen:
#   filename:  memory.schema.yaml
#   timestamp: 2025-04-11T19:10:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class Identifier(RootModel[constr(pattern=r'^[a-zA-Z_\-]+[a-zA-Z0-9$_\-]*$')]):
    root: constr(pattern=r'^[a-zA-Z_\-]+[a-zA-Z0-9$_\-]*$') = Field(
        ...,
        description='An identifier for use within the context of a root pointer\n',
        examples=['a', 'a0', '-$', '__init__'],
        title='ethdebug/format/pointer/identifier',
    )


class Unsigned(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ...,
        description='A non-negative integer encoded as a JSON number.\n',
        examples=[0, 100],
        title='ethdebug/format/data/unsigned',
    )


class Hex(RootModel[constr(pattern=r'^0x[0-9a-fA-F]{1,}$')]):
    root: constr(pattern=r'^0x[0-9a-fA-F]{1,}$') = Field(
        ...,
        description='A `0x`-prefixed hexadecimal string. This value **must** contain at least one\nhexadecimal character (`0x` by itself is not allowed).\n',
        examples=['0x0000', '0x1'],
        title='ethdebug/format/data/hex',
    )


class Constant(Enum):
    field_wordsize = '$wordsize'


class Variable(RootModel[Identifier]):
    root: Identifier = Field(
        ...,
        description='A string that matches an identifier used in an earlier declaration of\na scalar variable. This expression evaluates to the value of that\nvariable.\n',
        title='Variable identifier',
    )


class Reference(RootModel[Union[Identifier, str]]):
    root: Union[Identifier, str] = Field(
        ...,
        description='A string value that **must** either be the `"name"` of at least one\nregion declared with `{ "name": "<region>" }` previously in some root\npointer representation, or it **must** be the literal value `"$this"`,\nwhich indicates a reference to the region containing this expression.\n\nIf more than one region is defined with the same name, resolution is\ndefined as firstly resolving to the latest earlier sibling that declares\nthe matching name, then secondly resolving to the parent if it matches,\nthen to parent\'s earlier siblings, and so on.\n',
        title='Region reference',
    )


class Base(BaseModel):
    name: Optional[Identifier] = None
    location: str


class Value(RootModel[Union[Unsigned, Hex]]):
    root: Union[Unsigned, Hex] = Field(
        ...,
        description='A non-negative integer value, expressed either as a native JSON number or as\na `0x`-prefixed hexadecimal string.\n',
        examples=['0x0000', 2],
        title='ethdebug/format/data/value',
    )


class Lookup(RootModel[Dict[constr(pattern=r'^\.(offset|length|slot)$'), Reference]]):
    root: Dict[constr(pattern=r'^\.(offset|length|slot)$'), Reference] = Field(
        ...,
        description='An object of the form `{ ".<property-name>": "<region>" }`, to\ndenote that this expression is equivalent to the defined value for\nthe property named `<property-name>` inside the region referenced as\n`<region>`.\n\n`<property-name>` **must** be a valid and present property on the\ncorresponding region, or it **must** correspond to an optional property\nwhose schema specifies a default value for that property.\n',
        examples=[
            {'.offset': 'array-count'},
            {'.length': 'array-item'},
            {'.offset': '$this'},
        ],
        title='Lookup region definition',
    )


class Read(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_read: Reference = Field(..., alias='$read')


class LiteralModel(RootModel[Value]):
    root: Value = Field(
        ...,
        description='An unsigned number or a `0x`-prefixed string of hexadecimal digits\n',
        examples=[
            5,
            '0x0000000000000000000000000000000000000000000000000000000000000000',
        ],
        title='Literal value',
    )


class Slice(BaseModel):
    offset: Expression = Field(
        ...,
        description='The index of the byte (starting from zero) in the data location where\nthe slice begins.\n',
    )
    length: Expression = Field(
        ..., description='The length of the slice in number of bytes.\n'
    )


class Expression(
    RootModel[
        Union[
            LiteralModel,
            Variable,
            Constant,
            Arithmetic,
            Lookup,
            Read,
            Keccak256,
            Resize,
        ]
    ]
):
    root: Union[
        LiteralModel, Variable, Constant, Arithmetic, Lookup, Read, Keccak256, Resize
    ] = Field(
        ...,
        description='A schema for describing expressions that evaluate to values.\n',
        examples=[
            0,
            {'$sum': [{'.offset': 'array-start'}, {'.length': 'array-start'}, 1]},
            {'$keccak256': [5, {'.offset': 'array-start'}]},
        ],
        title='ethdebug/format/pointer/expression',
    )


class Arithmetic(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_sum: Optional[Operands] = Field(
        None, alias='$sum', description='A list of expressions to be added together.\n'
    )
    field_difference: Optional[Operands] = Field(
        None,
        alias='$difference',
        description='A tuple of two expressions where the second is to be subtracted from\nthe first.\n\nIf the second operand is larger than the first, the result of this\narithmetic operation is defined to equal zero (`0`).\n\n(i.e., `{ "$difference": [a, b] }` equals `a` minus `b`.)\n',
    )
    field_product: Optional[Operands] = Field(
        None, alias='$product', description='A list of expressions to be multipled.\n'
    )
    field_quotient: Optional[Operands] = Field(
        None,
        alias='$quotient',
        description='A tuple of two expressions where the first corresponds to the\ndividend and the second corresponds to the divisor, for the purposes\nof doing integer division.\n\n(i.e., `{ "$quotient": [a, b] }` equals `a` divided by `b`.)\n',
    )
    field_remainder: Optional[Operands] = Field(
        None,
        alias='$remainder',
        description='A tuple of two expressions where the first corresponds to the\ndividend and the second corresponds to the divisor, for the purposes\nof computing the modular-arithmetic remainder.\n\n(i.e., `{ "$remainder": [a, b] }` equals `a` mod `b`.)\n',
    )


class Operands(RootModel[List[Expression]]):
    root: List[Expression]


class Keccak256(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_keccak256: List[Expression] = Field(
        ..., alias='$keccak256', title='Array of hashed values'
    )


class Resize(
    RootModel[
        Union[
            Dict[constr(pattern=r'^\$sized([1-9]+[0-9]*)$'), Expression],
            Dict[constr(pattern=r'^\$wordsized$'), Expression],
        ]
    ]
):
    root: Union[
        Dict[constr(pattern=r'^\$sized([1-9]+[0-9]*)$'), Expression],
        Dict[constr(pattern=r'^\$wordsized$'), Expression],
    ] = Field(
        ...,
        description='A resize operation expression is either an object of the form\n`{ "$sized<N>": <expression> }` or an object of the form\n`{ "$wordsized": <expression> }`, where `<expression>` is an expression\nwhose value is to be resized, and, if applicable, where `<N>` is the\nsmallest decimal representation of an unsigned integer.\n\nThis object\'s value is evaluated as follows, based on the bytes width of\nthe value `<expression>` evaluates to and based on `<N>` (using the\nvalue of `"$wordsize"` for `<N>` in the case of the latter form above):\n- If the width equals `<N>`, this object evalutes to the same value as\n  `<expression>` (equivalent to the identity function or no-op).\n- If the width is less than `<N>`, this object evalutes to the same value\n  as `<expression>` but with additional zero-bytes (`0x00`) prepended on\n  the left (most significant) side, such that the resulting bytes width\n  equals `<N>`.\n- If the width exceeds `<N>`, this object evalutes to the same value\n  as `<expression>` but with a number of bytes removed from the left\n  (most significant) side until the bytes width equals `<N>`.\n\n(These cases match the behavior that Solidity uses for resizing its\n`bytesN`/`uintN` types.)\n',
        examples=[{'$sized2': '0x00'}, {'$sized2': '0xffffff'}, {'$wordsized': '0x00'}],
        title='Resize data',
    )


class EthdebugFormatPointerRegionMemory(Base, Slice):
    location: Literal['memory']


Slice.model_rebuild()
Expression.model_rebuild()
Arithmetic.model_rebuild()
EthdebugFormatPointerRegionMemory.model_rebuild()
