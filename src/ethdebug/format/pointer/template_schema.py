# generated by datamodel-codegen:
#   filename:  pointer/template.schema.yaml

from __future__ import annotations

from typing import Annotated, List

from pydantic import BaseModel, ConfigDict, Field

from ..pointer_schema import Pointer
from .identifier_schema import PointerIdentifier


class PointerTemplate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expect: Annotated[
        List[PointerIdentifier],
        Field(
            description='An array of variable identifiers used in the definition of the\npointer template.\n',
            title='Template variables',
        ),
    ]
    for_: Annotated[Pointer, Field(alias='for')]
