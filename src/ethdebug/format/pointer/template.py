# generated by datamodel-codegen:
#   filename:  template.schema.yaml
#   timestamp: 2025-04-11T12:46:47+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class Identifier(RootModel[constr(pattern=r'^[a-zA-Z_\-]+[a-zA-Z0-9$_\-]*$')]):
    root: constr(pattern=r'^[a-zA-Z_\-]+[a-zA-Z0-9$_\-]*$') = Field(
        ...,
        description='An identifier for use within the context of a root pointer\n',
        examples=['a', 'a0', '-$', '__init__'],
        title='ethdebug/format/pointer/identifier',
    )


class Pointer(BaseModel):
    pass


class EthdebugFormatPointerTemplate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expect: List[Identifier] = Field(
        ...,
        description='An array of variable identifiers used in the definition of the\npointer template.\n',
        title='Template variables',
    )
    for_: Pointer = Field(..., alias='for')
