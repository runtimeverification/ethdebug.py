from __future__ import annotations
from abc import ABC
from typing import Iterable
from ethdebug.data import Data
from ethdebug.machine import MachineState

class Cursor(ABC):
  
  async def view(self, state: MachineState) -> View:
    """
    View the cursor with a given MachineState
    """
    ...

class View(ABC):
    """
    The result of viewing a Cursor with a given MachineState
    """

    def regions(self) -> Regions:
        """
        Get the regions from the view
        """
        ...

    async def read(self, region: Region) -> Data:
        """
        Read bytes from the machine state corresponding to the bytes range
        for a particular concrete Region
        """
        ...

class Region(ABC):
    location: str
    name: str | None
    slot: Data | None
    offset: Data | None
    length: Data | None


class Regions(ABC):
    """
    A collection of concrete regions.

    This collection serves as a plain list of regions, for simple iteration
    and whatever filtering.

    It also provides a couple interfaces of its own for accessing regions by
    name.
    """

    def all(self) -> Iterable[Region]:
        """
        Obtain an ordered list of all regions in the collection.
        """
        ...

    def add(self, region: Region) -> Regions:
        """
        Add a region to the collection.
        """
        ...

    def set_this(self, region: Region) -> Regions:
        """
        Replace the latest region generated $this region with the provided one.
        The name of the provided region is automatically set to $this.
        """
        ...

    def named(self, name: str) -> Iterable[Region]:
        """
        Obtain an ordered list of all regions with a particular name.

        This is useful, e.g., when looking to concatenate a series of
        sequential regions that were generated by index from a list
        collection
        """
        ...

    def lookup(self, name: str) -> Region | None:
        """
        Obtain an ordered list of all regions with a particular name.
        
        This is useful, e.g., when looking to concatenate a series of
        sequential regions that were generated by index from a list
        collection
        """
        ...
