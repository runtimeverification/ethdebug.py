from __future__ import annotations
from typing import List, Dict, Union, Optional
from dataclasses import dataclass

from frozendict import frozendict
from ethdebug.data import Data

from ethdebug.format.pointer.expression_schema import EthdebugFormatPointerExpression

class View:
    """
    The result of viewing a Cursor with a given Machine.State
    """
    def __init__(self, regions: Regions):
        self.regions = regions

    async def read(self, region: Region) -> Data:
        """
        Read bytes from the machine state corresponding to the bytes range
        for a particular concrete Cursor.Region
        """
        # Implementation goes here
        pass

@dataclass
class Region:
    """
    A Pointer region where all dynamic expressions have been replaced with
    concrete bytes values.
    """
    slot: Optional[Union[EthdebugFormatPointerExpression, Data]] = None
    offset: Optional[Union[EthdebugFormatPointerExpression, Data]] = None
    length: Optional[Union[EthdebugFormatPointerExpression, Data]] = None

class Regions:
    """
    A collection of concrete regions.

    This collection serves as a plain list of regions, for simple iteration
    and whatever filtering.

    It also provides a couple interfaces of its own for accessing regions by
    name.
    """

    _regions: tuple[Region, ...]
    _lookup: frozendict[str, Region]

    def __init__(self, regions: tuple[Region, ...]):
        self._regions = regions
        self._lookup = frozendict({})

    def named(self, name: str) -> List[Region]:
        """
        Obtain an ordered list of all regions with a particular name.

        This is useful, e.g., when looking to concatenate a series of
        sequential regions that were generated by index from a list
        collection
        """
        return [region for region in self._regions if getattr(region, 'name', None) == name]

    def __iter__(self):
        return iter(self._regions)

    def __getitem__(self, index):
        return self._regions[index]

    def __len__(self):
        return len(self._regions)
