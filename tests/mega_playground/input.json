{
    "language": "Solidity",
    "sources": {
        "mega_playground.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.29;\n\n/// @title MegaFeaturePlayground\n/// @notice Demonstrates a broad spectrum of Solidity features.\n\n/// User-defined value type\ntype UFixed256x18 is uint256;\n\n/// Library example\nlibrary MathLib {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n}\n\n/// Interface example\ninterface IGreeter {\n    function greet() external view returns (string memory);\n}\n\n/// Abstract contract example\nabstract contract GreeterBase {\n    function greet() public view virtual returns (string memory);\n}\n\n/// Enum example\nenum Status { Pending, Active, Inactive }\n\n/// Struct example\nstruct Profile {\n    string name;\n    uint age;\n    Status status;\n}\n\n/// Base contract\ncontract Owned {\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\n/// Main contract\ncontract MegaFeaturePlayground is Owned, GreeterBase, IGreeter {\n    using MathLib for uint256;\n\n    /// State variables\n    uint256 public immutable creationTime;\n    uint256 public constant VERSION = 1;\n    uint256 public balance;\n    mapping(address => Profile) public profiles;\n    address[] public users;\n\n    /// Events\n    event ProfileCreated(address indexed user, string name, uint age);\n    event EtherReceived(address indexed sender, uint amount);\n    event CustomErrorRaised();\n\n    /// Custom error\n    error InvalidProfile(string reason);\n\n    /// Constructor\n    constructor() payable {\n        creationTime = block.timestamp;\n    }\n\n    /// Receive Ether\n    receive() external payable {\n        emit EtherReceived(msg.sender, msg.value);\n        balance += msg.value;\n    }\n\n    /// Fallback\n    fallback() external payable {\n        emit EtherReceived(msg.sender, msg.value);\n    }\n\n    /// External function\n    function createProfile(string calldata name, uint age) external {\n        if (age == 0) revert InvalidProfile(\"Age must be > 0\");\n        profiles[msg.sender] = Profile(name, age, Status.Active);\n        users.push(msg.sender);\n        emit ProfileCreated(msg.sender, name, age);\n    }\n\n    /// View function\n    function getProfile(address user) public view returns (Profile memory) {\n        return profiles[user];\n    }\n\n    /// Pure function\n    function sum(uint256 a, uint256 b) public pure returns (uint256) {\n        return a.add(b); // using library\n    }\n\n    /// Payable function\n    function donate() external payable {\n        balance += msg.value;\n    }\n\n    /// Internal function\n    function internalHelper() internal view returns (bool) {\n        return msg.sender == owner;\n    }\n\n    /// Private function\n    function _privateLogic(uint256 x) private pure returns (uint256) {\n        return x * 42;\n    }\n\n    /// Assembly example\n    function getCodeSize(address _addr) public view returns (uint size) {\n        assembly {\n            size := extcodesize(_addr)\n        }\n    }\n\n    /// Low-level call\n    function callOther(address target, bytes calldata data) external payable {\n        (bool success, ) = target.call{value: msg.value}(data);\n        require(success, \"Call failed\");\n    }\n\n    /// Delegatecall\n    function delegateTo(address target, bytes calldata data) external {\n        (bool success, ) = target.delegatecall(data);\n        require(success, \"Delegatecall failed\");\n    }\n\n    /// Try/catch\n    function tryCreate(address addr) external {\n        try this.createProfile(\"TryUser\", 1) {\n            // success\n        } catch Error(string memory reason) {\n            emit CustomErrorRaised();\n        }\n    }\n\n    /// Overloaded functions\n    function overload() public pure returns (string memory) {\n        return \"no args\";\n    }\n\n    function overload(uint256 x) public pure returns (uint256) {\n        return x + 1;\n    }\n\n    /// Overridden function\n    function greet() public view override(GreeterBase, IGreeter) returns (string memory) {\n        return \"Hello from MegaFeaturePlayground\";\n    }\n\n    /// Function selector\n    function getSelector(string calldata sig) external pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sig)));\n    }\n\n    /// Storage vs memory vs calldata\n    function echoMemory(string memory s) public pure returns (string memory) {\n        return s;\n    }\n\n    function echoCalldata(string calldata s) public pure returns (string calldata) {\n        return s;\n    }\n\n    function echoStorage(uint index) public view returns (string memory) {\n        return profiles[users[index]].name;\n    }\n}"
        }
    },
    "settings": {
        "viaIR": true,
        "debug": {
            "debugInfo": [
                "ethdebug"
            ]
        },
        "outputSelection": {
            "*": {
                "*": [
                    "evm.bytecode.ethdebug",
                    "evm.deployedBytecode.ethdebug",
                    "ir",
                    "irOptimized"
                ]
            }
        }
    }
}